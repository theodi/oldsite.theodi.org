{"id":"https://contentapi.theodi.org/making-open-source-code-easier-with-henry.json","web_url":"http://theodi.org/blog/making-open-source-code-easier-with-henry","slug":"making-open-source-code-easier-with-henry","title":" Making open source code easier with Henry","format":"article","updated_at":"2016-06-08T11:21:16+00:00","created_at":"2016-03-10T17:58:08+00:00","tag_ids":["blog","labs","ruby","github","programming","tech","tech-team"],"tags":[{"id":"https://contentapi.theodi.org/tags/articles/blog.json","web_url":null,"title":"Blog Post","details":{"description":"Blog Post","type":"article"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?article=blog","web_url":"http://theodi.org/tags/blog","slug":"blog"}},{"id":"https://contentapi.theodi.org/tags/keywords/labs.json","web_url":null,"title":"labs","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=labs","web_url":"http://theodi.org/tags/labs","slug":"labs"}},{"id":"https://contentapi.theodi.org/tags/keywords/ruby.json","web_url":null,"title":"ruby","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=ruby","web_url":"http://theodi.org/tags/ruby","slug":"ruby"}},{"id":"https://contentapi.theodi.org/tags/keywords/github.json","web_url":null,"title":"github","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=github","web_url":"http://theodi.org/tags/github","slug":"github"}},{"id":"https://contentapi.theodi.org/tags/keywords/programming.json","web_url":null,"title":"programming","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=programming","web_url":"http://theodi.org/tags/programming","slug":"programming"}},{"id":"https://contentapi.theodi.org/tags/keywords/tech.json","web_url":null,"title":"tech","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=tech","web_url":"http://theodi.org/tags/tech","slug":"tech"}},{"id":"https://contentapi.theodi.org/tags/keywords/tech-team.json","web_url":null,"title":"tech team","details":{"type":"keyword"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?keyword=tech-team","web_url":"http://theodi.org/tags/tech-team","slug":"tech-team"}}],"details":{"business_proposition":false,"description":"<p>Along with technology to help open data publication, the ODI Labs team work on tools to help make open source code publication easier. ODI web developer Stuart Harrison introduces 'Henry', a tool to help you deploy Ruby gems faster and more frequently</p>","excerpt":"Along with technology to help open data publication, the ODI Labs team work on tools to help make open source code publication easier. ODI web developer Stuart Harrison introduces 'Henry', a tool to help you deploy Ruby gems faster and more frequently\r","language":"en","need_extended_font":false,"alternative_title":" Making open source code easier with Henry","url":"","content":"<p><em>Along with technology to help open data publication, the ODI Labs team work on tools to help make open source code publication easier. ODI web developer Stuart Harrison introduces 'Henry', a tool to help you deploy Ruby gems faster and more frequently</em></p>\n<p><img src=\"http://bd7a65e2cb448908f934-86a50c88e47af9e1fb58ce0672b5a500.r32.cf3.rackcdn.com/uploads/assets/03/dd/5703dd911f986a0848000001/henry.jpg\" alt=\"\" class=\"img\" id=\"5703dd91d0d4620624000008\">\n<small>Henry is a tool developed by ODI Labs to lower the barriers to publishing open source software. <a href=\"https://creativecommons.org/licenses/by/2.0/\" title=\"CC BY 2.0\">CC BY 2.0</a>, uploaded by [davidwithacamera](https://www.flickr.com/photos/davidwithacamera/8735762528/in/photolist-eiX4Rj-acUjmF-4bovG5-iY8b5-8rFzHk-8zvhCt-7x3Arr-7x3At8-pwa9MS-gXVmsT-77P3vT-6wmd3u-4yFEiP-de88Zq-9n77JU-9ibgqA-77SWZW-iuDhWd-7hXjpC-Q4L3W-siaKXc-iMUCq-iMUCo-iMpV9-nfdQHV-iMpV7-bv7gRn-iMUCn-4XKeGw-bv7gPa-iMpVa-nuENLQ-ppP12m-iMpV6-76ZeS9-6XkzcH-sfVoQN-71dYXN-8RqpdM-8Rqpgp-fAts7o-b6fFHc-aFjc81-6FECmy-6Xpzku-bd84hV-d3RA1-6BQfCG-7pUwj9-amBpQP â€œdavidwithacamera\").</small></p>\n<p>In the ODI Labs team, our weapon of choice for almost all software development work is Ruby. It's fast, pleasing to write and enormously flexible. Plus, it has a huge community of people writing open source code that we can build upon, meaning we don't need to reinvent the wheel every time we want to carry out a common task, like parsing XML, interfacing with an API, or connecting to a database.</p>\n<p>As with most modern programming languages, these pieces of code are often wrapped up in packages, which in Ruby-land are called 'gems'. When taking on a new project, Ruby developers will pretty much always use at least one gem, and often many, many more.</p>\n<p>Every now and then, we come across a problem that hasn't been solved, and if it's a problem we think other people may have, we write a gem of our own. Amongst other things,\nwe've written gems to <a href=\"https://github.com/theodi/csvlint.rb\">validate CSV files</a>, <a href=\"https://github.com/theodi/data_kitten\">extract metadata out of open data datasets</a> and <a href=\"https://github.com/theodi/bimble\">keep code dependencies up to date</a>. When we're ready to share our code with the world, we publish our gem to <a href=\"http://rubygems.org\">Rubygems</a>, which is the de-facto standard package repository for Ruby gems.</p>\n<h3 id=\"continuousdeploymentforfunandforprofit\">Continuous deployment for fun and for profit</h3>\n<p>To rewind for a minute, when we're building tools for the Web, such as <a href=\"http://csvlint.io\">CSVlint</a> or <a href=\"http://certificates.theodi.org\">Open Data Certificates</a>, we employ a technique known as Continuous Deployment.</p>\n<p>Put very simply, when we push our code up to GitHub, our tests run (currently in <a href=\"http://travis-ci.org\">Travis</a>), and if the code is on a master branch, a git tag marked <code>CURRENT</code> is applied to that version of the code. We have a job that runs every 10 minutes on our servers, and if it picks up that the <code>CURRENT</code> tag has changed, it deploys that version of the code to the server. This way we don't have to think about deploying our code when\nit changes, it just works.</p>\n<p>I've often wished we could apply that approach to our gems. Usually, when you publish a new version of a gem, you need to write a Changelog (saying what you've added or changed), package your code into a new gem and push this up to Rubygems. It also helps to push a new tag in Github with the current version number, so people can see a snapshot of what the code looked like at a certain point.</p>\n<p>This can be automated to a certain extent in Travis, using <a href=\"https://docs.travis-ci.com/user/deployment/rubygems\">Travis's fantastic Rubygems integration</a>, but I wanted more. </p>\n<p>Sensibly, by default, Travis suggests that you only publish to Rubygems when you push a new tag to Github. This is fine and dandy, but still involves another manual step after you've written new code. You can often forget to do this, too, meaning users won't immediately get the benefit from your shiny new code.</p>\n<h3 id=\"itsgemsallthewaydown\">It's gems, all the way down</h3>\n<p>After this had been bugging me for a while, I decided to do something about it. Initially I reengineered a bash script that we already used with our web-based projects for continuous deployment, which applies the <code>CURRENT</code> tag.</p>\n<p>This runs after a successful test run on the master branch, gets the current version of the code, and pushes a tag with that version. Travis then runs the tests for a second time against the tagged code and deploys to Rubygems.</p>\n<pre><code>export GEM_VERSION=`ruby -e \"puts Gem::Specification.load(Dir['*.gemspec'].first).version.to_s\"`\n'[ \"$TRAVIS_BRANCH\" == \"master\" ] &amp;&amp; [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ] &amp;&amp; curl \\\n-v -X POST -d ''{\"ref\":\"refs/tags/''$GEM_VERSION''\",\"sha\":\"''$TRAVIS_COMMIT''\"}'' --header \\\n\"Content-Type:application/json\" -u $GITHUB_USER:$GITHUB_PASSWORD \"https://api.github.com/repos/$TRAVIS_REPO_SLUG/git/refs\"'\n</code></pre>\n<p>That worked surprisingly well, and we have been happily using it with CSVLint for a few months now. But, again, I wanted more.</p>\n<p>I'd been using a tool called <a href=\"https://github.com/skywinder/github-changelog-generator\">Github Changelog Generator</a> for a few months, which uses your Github history to create a changelog, showing what code has changed, as well as what issues and pull requests have been closed since the last version of the code. You can see some example output <a href=\"https://github.com/theodi/csvlint.rb/blob/master/CHANGELOG.md\">here</a>.\nI wondered if I could combine what I'd written with Github Changelog Generator to automatically create a tag, publish the gem and create a changelog, making pushing a new version of a gem as easy as deploying new code to a webserver. So I gave it a shot, and here's the outcome.</p>\n<pre><code>'[ \"$TRAVIS_BRANCH\" == \"master\" ] &amp;&amp; [ \"$TRAVIS_PULL_REQUEST\" == \"false\" ] &amp;&amp; \\\ngem install github_changelog_generator &amp;&amp; github_changelog_generator &amp;&amp; git config user.name \"Travis CI\" &amp;&amp; \\\ngit config user.email \"travis@theodi.org\" &amp;&amp; git checkout master &amp;&amp; git add CHANGELOG.md &amp;&amp; \\\ngit commit -m \"Updated Changelog [ci skip]\" &amp;&amp; git push \"https://${CHANGELOG_GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}\" master'\n</code></pre>\n<p>This horror show of a bash script checks if we're on master and the code isn't from a pull request, installs and runs the changelog generator, then pushes the newly generated changelog to master. The commit message is prefixed with <code>[ci skip]</code>, which tells Travis not to run the tests, otherwise we'd be in a whole heap of trouble with infinite looping test runs.</p>\n<p>This worked reasonably well, but I still wasn't 100% happy. My bash-fu is pretty weak, and I wasn't entirely sure that copying and pasting bash scripts from one project to another was an entirely smooth development flow, so, like in many of these cases, I decided to write a gem.</p>\n<h3 id=\"enterhenry\">Enter Henry</h3>\n<p>The result was <a href=\"https://github.com/theodi/henry\">Henry</a>, initially named after Henry Ford, the inventor of the production line, but I'm actually happier with using a Henry vacuum cleaner as a mascot, because who doesn't love a smiling anthropomorphic household appliance?</p>\n<p>Now, if you want to continuously deploy your own Ruby gems, rather than copying and pasting some crufty, error-prone bash script, you can run <code>gem install henry</code> inside your project, then run <code>henry bootstrap</code>, and Henry will do the rest!</p>\n<p>It's still very early days for Henry, and I'm sure there are some rough edges that could be ironed out, but I'm pretty happy with the overall approach. It lowers the barriers to publishing open source software, and will (hopefully) make some people's lives easier. So if you're a Ruby developer, please give it a go, and if anything breaks â€“ or if you have an idea for any improvements â€“ please <a href=\"https://github.com/theodi/henry/issues\">open an issue</a> or a <a href=\"https://github.com/theodi/henry/pulls\">pull request</a>.</p>\n<p><strong><em>Stuart Harrison is <a href=\"https://theodi.org/team/stuart-harrison\">Web Developer</a> at the ODI. Follow <a href=\"https://twitter.com/pezholio\">@pezholio</a> on Twitter.</em></strong></p>\n<p><em><strong>If you have ideas or experience in open data that you'd like to share, <a href=\"mailto:production@theodi.org\" title=\"pitch us a blog\">pitch us a blog</a> or tweet us at <a href=\"https://twitter.com/odihq\" title=\"@ODIHQ\">@ODIHQ</a>.</strong></em></p>","media_enquiries_name":"","media_enquiries_email":"","media_enquiries_telephone":"","organizations":[],"author":{}},"related_external_links":[],"related":[],"organizations":[],"author":{}}