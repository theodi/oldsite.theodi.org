{"id":"https://contentapi.theodi.org/how-to-use-r-to-access-data-on-the-web.json","web_url":"http://theodi.org/blog/how-to-use-r-to-access-data-on-the-web","slug":"how-to-use-r-to-access-data-on-the-web","title":"How to use R to access data on the web","format":"article","updated_at":"2015-09-11T09:55:17+00:00","created_at":"2014-02-07T15:24:26+00:00","tag_ids":["blog"],"tags":[{"id":"https://contentapi.theodi.org/tags/articles/blog.json","web_url":null,"title":"Blog Post","details":{"description":"Blog Post","type":"article"},"content_with_tag":{"id":"https://contentapi.theodi.org/with_tag.json?article=blog","web_url":"http://theodi.org/tags/blog","slug":"blog"}}],"details":{"business_proposition":false,"description":"","excerpt":"Data on the web comes in several modes, for example:\r","language":"en","need_extended_font":false,"alternative_title":"","url":"","content":"<p>Data on the web comes in several modes, for example:</p>\n<ul>\n<li>files that you can download</li>\n<li>APIs</li>\n<li>content such as HTML tables</li>\n<li>custom data browsers</li>\n<li>and more.</li>\n</ul>\n<p>Analysing or using data without software is incredibly cumbersome if not impossible. <strong>Here we show you how you can import data from the web into a tool called R.</strong> Reasons why R has become so popular, and continues to grow, are that it's free, open source, with state-of-the-art practices and a fantastic community. </p>\n<p><a href=\"http://www.r-project.org/\">R</a>, and its IDE <a href=\"http://www.rstudio.com/\">RStudio</a>, is a statistical software and data analysis environment. You can find a quick interactive tutorial on <a href=\"https://www.codeschool.com/courses/try-r\">Code School</a> or well-designed courses on <a href=\"https://www.datacamp.com\">DataCamp</a>. If you haven't installed R, you can paste and try the code at <a href=\"http://www.r-fiddle.org\">R-fiddle</a>.</p>\n<h3 id=\"commaseparatedvaluescsv\">Comma separated values (CSV)</h3>\n<p>Reading a CSV-file from an URL could not be simpler. Here are the number of police officers in Scotland over time. </p>\n<pre><code>read.csv(\"http://www.quandl.com/api/v1/datasets/EUROSTAT/CRIM_PLCE_42.csv\")\n</code></pre>\n<p>And yet it is not guaranteed that this works. Why? Many CSVs don't follow a minimal standard. For example, the first row of a CSV file should be a header row, but some data has a header row in a later line. We use the <code>skip</code> option. </p>\n<pre><code>read.csv(\"http://www.royalwolverhamptonhospitals.nhs.uk/files/mth%206%20september%202013%20(3).csv\", skip = 2)\n</code></pre>\n<p>Unfortunately, <code>read.csv()</code> does not cope well with SSL, that is https connections. An alternative employs <code>download.file</code>, see below. </p>\n<pre><code># Fail\nread.csv(\"https://raw.github.com/sciruela/Happiness-Salaries/master/data.csv\")\n\n# Win\nread.url &lt;- function(url, ...){\n  tmpFile &lt;- tempfile()\n  download.file(url, destfile = tmpFile, method = \"curl\")\n  url.data &lt;- read.csv(tmpFile, ...)\n  return(url.data)\n}\nread.url(\"https://raw.github.com/sciruela/Happiness-Salaries/master/data.csv\")\n</code></pre>\n<h4 id=\"whatgiftsdiddavidcameronreceiveinmayjune2013\">What gifts did David Cameron receive in May-June 2013?</h4>\n<p>The UK government publishes data about gifts David Cameron receives and what happens with them. We will use it as another example.</p>\n<p>The data is behind a secure connection, so we use our <code>read.url</code> function. Yet it still produces an error. The reason is a Â£ symbol in the header row. </p>\n<pre><code>read.url(\"https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/246663/pmgiftsreceivedaprjun13.csv\")\n</code></pre>\n<p>A faster and more flexible tool is <code>fread</code> from the <a href=\"http://datatable.r-forge.r-project.org/\">data.table</a> package (see the documentation).</p>\n<pre><code>install.packages(\"data.table\")\nlibrary(data.table)\n\nread.url &lt;- function(url, ...){\n  tmpFile &lt;- tempfile()\n  download.file(url, destfile = tmpFile, method = \"curl\")\n  url.data &lt;- fread(tmpFile, ...)\n  return(url.data)\n}\n\nread.url(\"https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/246663/pmgiftsreceivedaprjun13.csv\")\n</code></pre>\n<p>And the results are:</p>\n<table class=\"table offers table-horizontally-condensed\">\n  <tr>\n    <th>Date received</th>\n    <th>From</th>\n    <th>Gift</th>\n    <th>Value</th>\n    <th>Outcome</th>\n  </tr>\n  <tr>\n    <td>May-13</td>\n    <td>President of UAE</td>\n    <td>Model boat</td>\n    <td>Over limit</td>\n    <td>Held by Department</td>\n  </tr>\n  <tr>\n    <td>Jun-13</td>\n    <td>Tony Pontone, Albemarle</td>\n    <td>Gallery Art work</td>\n    <td>Over limit</td>\n    <td>Held by Department</td>\n  </tr>\n  <tr>\n    <td>Jun-13</td>\n    <td>President of the United States</td>\n    <td>Jewellery</td>\n    <td>Over limit</td>\n    <td>Held by Department</td>\n  </tr>\n  <tr>\n    <td>Jun-13</td>\n    <td>President of Pakistan</td>\n    <td>Rug</td>\n    <td>Over limit</td>\n    <td>Held by Department</td>\n  </tr>\n  <tr>\n    <td>Jun-13</td>\n    <td>President of Kazakhstan</td>\n    <td>Medals & stamp album</td>\n    <td>Over limit</td>\n    <td>Held by Department</td>\n  </tr>\n</table>\n<hr />\n<p>A useful trick is to only read a few lines. This makes especially sense when you have a large dataset like the Land Registry's Price Paid Data (several GB in its complete form). </p>\n<pre><code>read.csv(\"http://publicdata.landregistry.gov.uk/market-trend-data/price-paid-data/a/pp-complete.csv\", nrow = 10)\n</code></pre>\n<h3 id=\"apis\">APIs</h3>\n<p>R's community has built wrapper packages for many APIs. For example, the <a href=\"https://github.com/vincentarelbundock/WDI\">World Bank Development indicators</a> are available in R. A quick example with Google's Ngram Viewer is below.</p>\n<p><strong>What is more popular: line charts or line graphs?</strong>\n<img src=\"https://raw.githubusercontent.com/theodi/R-playground/master/line-chart-graph.png\" alt=\"line\" /></p>\n<pre><code># Install the package\ninstall.packages(c(\"ngramr\", \"ggplot2\"))\n\n# Load it into R\nlibrary(ngramr)\nlibrary(ggplot2)\n\n# Case-insensitive search\nlines &lt;- ngrami(c(\"line chart\", \"line graph\"), year_start = 1913)\nggplot(lines, aes(Year, Frequency, colour = Phrase)) + theme_minimal() + geom_line(lwd = 1)\n</code></pre>\n<p><a href=\"http://ropensci.org/related/index.html\">ROpenSci</a> collected an extensive list of R packages that deal with APIs. It includes Twitter, the Guardian, Amazon Mechanical Turk and many more.</p>\n<h2 id=\"scraping\">Scraping</h2>\n<p>Scraping is an art in itself and is perhaps best left in the hands of experts such as our friends at <a href=\"https://scraperwiki.com/\">ScraperWiki</a>. However, R has support (packages, no surprise here) for popular tools. Worth mentioning is <a href=\"http://cran.r-project.org/web/packages/RCurl/index.html\">RCurl</a> and <a href=\"http://cran.r-project.org/web/packages/XML/index.html\">XML</a>.</p>\n<p><a href=\"http://cos.name/wp-content/uploads/2013/05/Web-Scraping-with-R-XiaoNan.pdf\">Xiao Nan</a> made a useful table of the R scraping toolkit.</p>\n<p><img src=\"https://raw.github.com/theodi/R-playground/master/available-R-packages.png\" alt=\"packages\" />\n<em>Source: Xiao Nan, <a href=\"https://twitter.com/road2stat\">@road2stat</a></em></p>\n<p>Lastly, I wished that I'd have known about parallelisation options earlier...\nFor example, <a href=\"http://www.inside-r.org/packages/cran/RCurl/docs/getURIAsynchronous\"><code>getURIAsynchronous</code></a> from RCurl. </p>\n<p>I also wrote a <a href=\"http://rpubs.com/statshero/opinion-polls\">tutorial on how to import a HTML table into R</a>. </p>\n<h2 id=\"whattodonext\">What to do next</h2>\n<p>Using a tool like R has another great advantage: unlike manually downloading a file, you can easily re-use and share your work. Having some R code instead of an Excel file means your analysis is reproducible and you may be able to adapt it for future projects or if an updated dataset was released.</p>\n<p>If you need help you can find support via <a href=\"http://stackoverflow.com/questions/tagged/r\">stackoverflow</a> and the <a href=\"http://www.r-project.org/mail.html\">R-help mailing list</a>. If you're looking for data, browse a catalogue (e.g. <a href=\"http://data.gov.uk/data/search\">data.gov.uk</a>), use a web search engine or ask me on <a href=\"https://twitter.com/statshero\">Twitter</a>.</p>","media_enquiries_name":"","media_enquiries_email":"","media_enquiries_telephone":"","organizations":[],"author":{}},"related_external_links":[],"related":[{"id":"https://contentapi.theodi.org/fig-data-11-tips-how-handle-big-data-r-and-1-bad-pun.json","web_url":"http://theodi.org/blog/fig-data-11-tips-how-handle-big-data-r-and-1-bad-pun","slug":"fig-data-11-tips-how-handle-big-data-r-and-1-bad-pun","title":"Fig Data: 11 Tips on How to Handle Big Data in R (and 1 Bad Pun)","format":"article","updated_at":"2015-09-11T10:03:05+00:00","created_at":"2013-07-18T08:42:56+00:00","tag_ids":["blog","technical","r","how-to","show-me-the-money","tech","tech-team"]}],"organizations":[],"author":{}}